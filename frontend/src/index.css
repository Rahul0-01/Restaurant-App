/* src/index.css - UPDATED */
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Optional: Define your custom animation here if it's globally used */
@keyframes fadeInScale {
  from {
    opacity: 0;
    transform: scale(0.95);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}
.animate-modalFadeInScale {
  animation: fadeInScale 0.3s ease-out forwards;
}

/* --- :root Variables and Default Text Styling --- */
/* It's okay to set font-family and basic text properties here, */
/* Tailwind's base will build upon this. */
:root {
  font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  /* color-scheme: light dark; */ /* Let Tailwind or your components manage this if you have a dark mode toggle */
  /* color: rgba(255, 255, 255, 0.87); */ /* REMOVE - Let Tailwind base set default text color, typically dark for light mode */
  /* background-color: #242424; */     /* REMOVE - Let Tailwind base/components set background */

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/* --- Body Styling --- */
/* Minimal body styling. Most will come from @tailwind base. */
body {
  margin: 0; /* Essential reset */
  min-width: 320px; /* Good for basic responsiveness */
  /* display: flex; */        /* REMOVED */
  /* place-items: center; */  /* REMOVED */
  /* min-height: 100vh; */  /* REMOVED - individual full-screen components will handle their own height */
  
  /* Let Tailwind's preflight/base styles handle default background and text colors. */
  /* Example: @tailwind base often makes body background white or very light gray. */
  /* If you want a specific default app background, you can apply it here using Tailwind classes or CSS: */
  /* background-color: #F9FAFB; */ /* e.g., Tailwind's gray-50 */
}

/* --- Styling for the React Root div --- */
/* Helps ensure full-height components work as expected. */
#root {
    min-height: 100vh;
    display: flex;      /* Allows App.jsx or Login.jsx to be a flex item that can grow */
    flex-direction: column; /* Typical for single-page app structure */
}


/* --- Global Link Styling (Optional, Tailwind offers utilities for this too) --- */
/* If you keep these, they might override Tailwind link utilities unless you are specific */
/*
a {
  font-weight: 500;
  color: #646cff; 
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}
*/

/* --- Global H1 Styling (Generally prefer utility classes for headings) --- */
/*
h1 {
  font-size: 3.2em;
  line-height: 1.1;
}
*/

/* --- Global Button Styling (REMOVE THESE and use Tailwind for all buttons) --- */
/* These highly specific button styles will conflict directly with Tailwind button classes. */
/*
button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}
*/

/* --- Light/Dark Mode Overrides --- */
/* If you have a theme toggle in your app, it's better to manage these via Tailwind's dark: variants */
/* and a class on the html or body tag. These @media rules might conflict. */
/*
@media (prefers-color-scheme: light) {
  :root {
    color: #213547;               
    background-color: #ffffff;      
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}
*/